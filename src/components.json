[
  {
    "name": "Button.tsx",
    "packagesRequired": "class-variance-authority clsx",
    "content": "import { VariantProps, cva } from \"class-variance-authority\";\r\nimport clsx from \"clsx\";\r\nimport React, { ButtonHTMLAttributes, FC, forwardRef } from \"react\";\r\n\r\nconst buttonVariants = cva(\r\n  /* button base style */\r\n  \"transition-colors duration-150\",\r\n  {\r\n    variants: {\r\n      /* button colors */\r\n      variant: {\r\n        contain:\r\n          \"text-white bg-primary-500 hover:bg-primary-600 focus:ring-2 focus:ring-primary-500 focus:bg-primary-400\",\r\n        ghost:\r\n          \"bg-transparent text-foreground-500 hover:text-foreground-400 focus:ring-2 focus:ring-black \",\r\n      },\r\n\r\n      /* button sizes */\r\n      size: {\r\n        small: [\"text-sm\", \"py-1\", \"px-2\"],\r\n        medium: [\r\n          \"text-base\",\r\n          \"leading-6\",\r\n          \"py-2\",\r\n          \"px-4\",\r\n          \"h-[48px]\",\r\n          \"font-medium\",\r\n        ],\r\n        large: [\"text-lg\", \"py-4\", \"px-8\"],\r\n      },\r\n\r\n      /* button roundness */\r\n      roundness: {\r\n        square: \"rounded-none\",\r\n        round: \"rounded-xl\",\r\n        pill: \"rounded-full\",\r\n      },\r\n\r\n      /* button block */\r\n      block: {\r\n        true: \"w-full\",\r\n      },\r\n    },\r\n\r\n    // defaults\r\n    defaultVariants: {\r\n      variant: \"contain\",\r\n      size: \"medium\",\r\n      roundness: \"round\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  ref?: React.Ref<HTMLButtonElement>;\r\n}\r\n\r\nconst Button: FC<ButtonProps> = forwardRef(\r\n  ({ size, variant, className, children, block, ...props }, ref) => {\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        type=\"button\"\r\n        className={clsx(buttonVariants({ className, variant, size, block }))}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Button;"
  },
  {
    "name": "TextInput.tsx",
    "packagesRequired": "class-variance-authority clsx",
    "content": "import { VariantProps, cva } from \"class-variance-authority\";\r\nimport clsx from \"clsx\";\r\nimport React, { FC, InputHTMLAttributes, forwardRef } from \"react\";\r\n\r\nconst textInputVariants = cva(\r\n  /* input base style */\r\n  \"bg-[#F4F4F5]\",\r\n  {\r\n    variants: {\r\n      /* button sizes */\r\n      size: {\r\n        small: [\"text-sm\", \"py-1\", \"px-2\"],\r\n        medium: [\r\n          \"text-base\",\r\n          \"leading-6\",\r\n          \"py-2\",\r\n          \"px-4\",\r\n          \"h-[48px]\",\r\n          \"font-medium\",\r\n        ],\r\n        large: [\"text-lg\", \"py-4\", \"px-8\"],\r\n      },\r\n\r\n      /* button roundness */\r\n      roundness: {\r\n        square: \"rounded-none\",\r\n        round: \"rounded-xl\",\r\n        pill: \"rounded-full\",\r\n      },\r\n\r\n      /* button block */\r\n      block: {\r\n        true: \"w-full\",\r\n      },\r\n    },\r\n\r\n    // defaults\r\n    defaultVariants: {\r\n      size: \"medium\",\r\n      roundness: \"round\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface TextInputProps\r\n  extends InputHTMLAttributes<HTMLInputElement>,\r\n    VariantProps<typeof textInputVariants> {\r\n  label?: string;\r\n  size?: VariantProps<typeof textInputVariants>[\"size\"];\r\n}\r\n\r\nconst TextInput: FC<TextInputProps> = forwardRef(\r\n  ({ size, className, children, block, ...props }, ref) => {\r\n    return (\r\n      <div>\r\n        <label\r\n          className=\"block text-base font-normal text-gray-900 mb-1\"\r\n          htmlFor={props.id}\r\n        >\r\n          {props.label}\r\n        </label>\r\n        <input\r\n          className={clsx(textInputVariants({ className, size, block }))}\r\n          {...props}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default TextInput;"
  }
]
